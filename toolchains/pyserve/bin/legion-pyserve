#!/usr/bin/env python
#
#    Copyright 2017 EPAM Systems
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

try:
    import docker_bootup
except ImportError:
    pass

import os
import argparse
import logging

import legion.utils

from legion_pyserve.serving.pyserve import serve_model

ROOT_LOGGER = logging.getLogger()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Legion PyServe')
    parser.add_argument('--verbose',
                        help='verbose log output',
                        action='store_true')
    parser.add_argument('--model_file',
                        type=str)
    parser.add_argument('--model-id',
                        type=str)
    parser.add_argument('--consul-addr',
                        type=str, help='Consul Agent IP address')
    parser.add_argument('--consul-port',
                        type=int, help='Consul Agent port')
    parser.add_argument('--legion-addr',
                        type=str)
    parser.add_argument('--legion-port',
                        type=int)
    parser.add_argument('--debug',
                        type=legion.utils.string_to_bool)
    parser.add_argument('--register-on-consul',
                        type=legion.utils.string_to_bool)
    parser.add_argument('--legion-autodiscover',
                        type=legion.utils.string_to_bool)
    args = parser.parse_args()

    if args.verbose or legion.utils.string_to_bool(os.getenv('VERBOSE', '')):
        log_level = logging.DEBUG
    else:
        log_level = logging.ERROR

    ROOT_LOGGER.setLevel(log_level)

    serve_model(args)
